/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ProductDAO.model.impl;

import ProductDAO.model.GKDetail;
import ProductDAO.model.GKDetailModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the GKDetail service. Represents a row in the &quot;GK_GKDetail&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>GKDetailModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GKDetailImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see GKDetailImpl
 * @generated
 */
@JSON(strict = true)
public class GKDetailModelImpl
	extends BaseModelImpl<GKDetail> implements GKDetailModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a gk detail model instance should use the <code>GKDetail</code> interface instead.
	 */
	public static final String TABLE_NAME = "GK_GKDetail";

	public static final Object[][] TABLE_COLUMNS = {
		{"GKDetailId", Types.BIGINT}, {"GKnumber", Types.VARCHAR},
		{"norm", Types.VARCHAR}, {"GKName", Types.VARCHAR},
		{"preOrder", Types.VARCHAR}, {"GKComponent", Types.VARCHAR},
		{"freight", Types.VARCHAR}, {"price", Types.INTEGER},
		{"team", Types.VARCHAR}, {"remark", Types.VARCHAR},
		{"imageName", Types.VARCHAR}, {"total", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("GKDetailId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("GKnumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("norm", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("GKName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("preOrder", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("GKComponent", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("freight", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("price", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("team", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("remark", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("imageName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("total", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table GK_GKDetail (GKDetailId LONG not null primary key,GKnumber VARCHAR(75) null,norm VARCHAR(75) null,GKName VARCHAR(2000) null,preOrder VARCHAR(75) null,GKComponent VARCHAR(75) null,freight VARCHAR(75) null,price INTEGER,team VARCHAR(75) null,remark VARCHAR(75) null,imageName VARCHAR(75) null,total INTEGER)";

	public static final String TABLE_SQL_DROP = "drop table GK_GKDetail";

	public static final String ORDER_BY_JPQL =
		" ORDER BY gkDetail.GKDetailId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY GK_GKDetail.GKDetailId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GKDETAILID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public GKDetailModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _GKDetailId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setGKDetailId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _GKDetailId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return GKDetail.class;
	}

	@Override
	public String getModelClassName() {
		return GKDetail.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<GKDetail, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<GKDetail, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<GKDetail, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((GKDetail)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<GKDetail, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<GKDetail, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(GKDetail)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<GKDetail, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<GKDetail, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<GKDetail, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<GKDetail, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<GKDetail, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<GKDetail, Object>>();
		Map<String, BiConsumer<GKDetail, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<GKDetail, ?>>();

		attributeGetterFunctions.put("GKDetailId", GKDetail::getGKDetailId);
		attributeSetterBiConsumers.put(
			"GKDetailId", (BiConsumer<GKDetail, Long>)GKDetail::setGKDetailId);
		attributeGetterFunctions.put("GKnumber", GKDetail::getGKnumber);
		attributeSetterBiConsumers.put(
			"GKnumber", (BiConsumer<GKDetail, String>)GKDetail::setGKnumber);
		attributeGetterFunctions.put("norm", GKDetail::getNorm);
		attributeSetterBiConsumers.put(
			"norm", (BiConsumer<GKDetail, String>)GKDetail::setNorm);
		attributeGetterFunctions.put("GKName", GKDetail::getGKName);
		attributeSetterBiConsumers.put(
			"GKName", (BiConsumer<GKDetail, String>)GKDetail::setGKName);
		attributeGetterFunctions.put("preOrder", GKDetail::getPreOrder);
		attributeSetterBiConsumers.put(
			"preOrder", (BiConsumer<GKDetail, String>)GKDetail::setPreOrder);
		attributeGetterFunctions.put("GKComponent", GKDetail::getGKComponent);
		attributeSetterBiConsumers.put(
			"GKComponent",
			(BiConsumer<GKDetail, String>)GKDetail::setGKComponent);
		attributeGetterFunctions.put("freight", GKDetail::getFreight);
		attributeSetterBiConsumers.put(
			"freight", (BiConsumer<GKDetail, String>)GKDetail::setFreight);
		attributeGetterFunctions.put("price", GKDetail::getPrice);
		attributeSetterBiConsumers.put(
			"price", (BiConsumer<GKDetail, Integer>)GKDetail::setPrice);
		attributeGetterFunctions.put("team", GKDetail::getTeam);
		attributeSetterBiConsumers.put(
			"team", (BiConsumer<GKDetail, String>)GKDetail::setTeam);
		attributeGetterFunctions.put("remark", GKDetail::getRemark);
		attributeSetterBiConsumers.put(
			"remark", (BiConsumer<GKDetail, String>)GKDetail::setRemark);
		attributeGetterFunctions.put("imageName", GKDetail::getImageName);
		attributeSetterBiConsumers.put(
			"imageName", (BiConsumer<GKDetail, String>)GKDetail::setImageName);
		attributeGetterFunctions.put("total", GKDetail::getTotal);
		attributeSetterBiConsumers.put(
			"total", (BiConsumer<GKDetail, Integer>)GKDetail::setTotal);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getGKDetailId() {
		return _GKDetailId;
	}

	@Override
	public void setGKDetailId(long GKDetailId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_GKDetailId = GKDetailId;
	}

	@JSON
	@Override
	public String getGKnumber() {
		if (_GKnumber == null) {
			return "";
		}
		else {
			return _GKnumber;
		}
	}

	@Override
	public void setGKnumber(String GKnumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_GKnumber = GKnumber;
	}

	@JSON
	@Override
	public String getNorm() {
		if (_norm == null) {
			return "";
		}
		else {
			return _norm;
		}
	}

	@Override
	public void setNorm(String norm) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_norm = norm;
	}

	@JSON
	@Override
	public String getGKName() {
		if (_GKName == null) {
			return "";
		}
		else {
			return _GKName;
		}
	}

	@Override
	public void setGKName(String GKName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_GKName = GKName;
	}

	@JSON
	@Override
	public String getPreOrder() {
		if (_preOrder == null) {
			return "";
		}
		else {
			return _preOrder;
		}
	}

	@Override
	public void setPreOrder(String preOrder) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_preOrder = preOrder;
	}

	@JSON
	@Override
	public String getGKComponent() {
		if (_GKComponent == null) {
			return "";
		}
		else {
			return _GKComponent;
		}
	}

	@Override
	public void setGKComponent(String GKComponent) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_GKComponent = GKComponent;
	}

	@JSON
	@Override
	public String getFreight() {
		if (_freight == null) {
			return "";
		}
		else {
			return _freight;
		}
	}

	@Override
	public void setFreight(String freight) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_freight = freight;
	}

	@JSON
	@Override
	public int getPrice() {
		return _price;
	}

	@Override
	public void setPrice(int price) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_price = price;
	}

	@JSON
	@Override
	public String getTeam() {
		if (_team == null) {
			return "";
		}
		else {
			return _team;
		}
	}

	@Override
	public void setTeam(String team) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_team = team;
	}

	@JSON
	@Override
	public String getRemark() {
		if (_remark == null) {
			return "";
		}
		else {
			return _remark;
		}
	}

	@Override
	public void setRemark(String remark) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_remark = remark;
	}

	@JSON
	@Override
	public String getImageName() {
		if (_imageName == null) {
			return "";
		}
		else {
			return _imageName;
		}
	}

	@Override
	public void setImageName(String imageName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_imageName = imageName;
	}

	@JSON
	@Override
	public int getTotal() {
		return _total;
	}

	@Override
	public void setTotal(int total) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_total = total;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, GKDetail.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public GKDetail toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, GKDetail>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GKDetailImpl gkDetailImpl = new GKDetailImpl();

		gkDetailImpl.setGKDetailId(getGKDetailId());
		gkDetailImpl.setGKnumber(getGKnumber());
		gkDetailImpl.setNorm(getNorm());
		gkDetailImpl.setGKName(getGKName());
		gkDetailImpl.setPreOrder(getPreOrder());
		gkDetailImpl.setGKComponent(getGKComponent());
		gkDetailImpl.setFreight(getFreight());
		gkDetailImpl.setPrice(getPrice());
		gkDetailImpl.setTeam(getTeam());
		gkDetailImpl.setRemark(getRemark());
		gkDetailImpl.setImageName(getImageName());
		gkDetailImpl.setTotal(getTotal());

		gkDetailImpl.resetOriginalValues();

		return gkDetailImpl;
	}

	@Override
	public GKDetail cloneWithOriginalValues() {
		GKDetailImpl gkDetailImpl = new GKDetailImpl();

		gkDetailImpl.setGKDetailId(
			this.<Long>getColumnOriginalValue("GKDetailId"));
		gkDetailImpl.setGKnumber(
			this.<String>getColumnOriginalValue("GKnumber"));
		gkDetailImpl.setNorm(this.<String>getColumnOriginalValue("norm"));
		gkDetailImpl.setGKName(this.<String>getColumnOriginalValue("GKName"));
		gkDetailImpl.setPreOrder(
			this.<String>getColumnOriginalValue("preOrder"));
		gkDetailImpl.setGKComponent(
			this.<String>getColumnOriginalValue("GKComponent"));
		gkDetailImpl.setFreight(this.<String>getColumnOriginalValue("freight"));
		gkDetailImpl.setPrice(this.<Integer>getColumnOriginalValue("price"));
		gkDetailImpl.setTeam(this.<String>getColumnOriginalValue("team"));
		gkDetailImpl.setRemark(this.<String>getColumnOriginalValue("remark"));
		gkDetailImpl.setImageName(
			this.<String>getColumnOriginalValue("imageName"));
		gkDetailImpl.setTotal(this.<Integer>getColumnOriginalValue("total"));

		return gkDetailImpl;
	}

	@Override
	public int compareTo(GKDetail gkDetail) {
		int value = 0;

		if (getGKDetailId() < gkDetail.getGKDetailId()) {
			value = -1;
		}
		else if (getGKDetailId() > gkDetail.getGKDetailId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof GKDetail)) {
			return false;
		}

		GKDetail gkDetail = (GKDetail)object;

		long primaryKey = gkDetail.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<GKDetail> toCacheModel() {
		GKDetailCacheModel gkDetailCacheModel = new GKDetailCacheModel();

		gkDetailCacheModel.GKDetailId = getGKDetailId();

		gkDetailCacheModel.GKnumber = getGKnumber();

		String GKnumber = gkDetailCacheModel.GKnumber;

		if ((GKnumber != null) && (GKnumber.length() == 0)) {
			gkDetailCacheModel.GKnumber = null;
		}

		gkDetailCacheModel.norm = getNorm();

		String norm = gkDetailCacheModel.norm;

		if ((norm != null) && (norm.length() == 0)) {
			gkDetailCacheModel.norm = null;
		}

		gkDetailCacheModel.GKName = getGKName();

		String GKName = gkDetailCacheModel.GKName;

		if ((GKName != null) && (GKName.length() == 0)) {
			gkDetailCacheModel.GKName = null;
		}

		gkDetailCacheModel.preOrder = getPreOrder();

		String preOrder = gkDetailCacheModel.preOrder;

		if ((preOrder != null) && (preOrder.length() == 0)) {
			gkDetailCacheModel.preOrder = null;
		}

		gkDetailCacheModel.GKComponent = getGKComponent();

		String GKComponent = gkDetailCacheModel.GKComponent;

		if ((GKComponent != null) && (GKComponent.length() == 0)) {
			gkDetailCacheModel.GKComponent = null;
		}

		gkDetailCacheModel.freight = getFreight();

		String freight = gkDetailCacheModel.freight;

		if ((freight != null) && (freight.length() == 0)) {
			gkDetailCacheModel.freight = null;
		}

		gkDetailCacheModel.price = getPrice();

		gkDetailCacheModel.team = getTeam();

		String team = gkDetailCacheModel.team;

		if ((team != null) && (team.length() == 0)) {
			gkDetailCacheModel.team = null;
		}

		gkDetailCacheModel.remark = getRemark();

		String remark = gkDetailCacheModel.remark;

		if ((remark != null) && (remark.length() == 0)) {
			gkDetailCacheModel.remark = null;
		}

		gkDetailCacheModel.imageName = getImageName();

		String imageName = gkDetailCacheModel.imageName;

		if ((imageName != null) && (imageName.length() == 0)) {
			gkDetailCacheModel.imageName = null;
		}

		gkDetailCacheModel.total = getTotal();

		return gkDetailCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<GKDetail, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<GKDetail, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<GKDetail, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((GKDetail)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<GKDetail, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<GKDetail, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<GKDetail, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((GKDetail)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, GKDetail>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					GKDetail.class, ModelWrapper.class);

	}

	private long _GKDetailId;
	private String _GKnumber;
	private String _norm;
	private String _GKName;
	private String _preOrder;
	private String _GKComponent;
	private String _freight;
	private int _price;
	private String _team;
	private String _remark;
	private String _imageName;
	private int _total;

	public <T> T getColumnValue(String columnName) {
		Function<GKDetail, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((GKDetail)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("GKDetailId", _GKDetailId);
		_columnOriginalValues.put("GKnumber", _GKnumber);
		_columnOriginalValues.put("norm", _norm);
		_columnOriginalValues.put("GKName", _GKName);
		_columnOriginalValues.put("preOrder", _preOrder);
		_columnOriginalValues.put("GKComponent", _GKComponent);
		_columnOriginalValues.put("freight", _freight);
		_columnOriginalValues.put("price", _price);
		_columnOriginalValues.put("team", _team);
		_columnOriginalValues.put("remark", _remark);
		_columnOriginalValues.put("imageName", _imageName);
		_columnOriginalValues.put("total", _total);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("GKDetailId", 1L);

		columnBitmasks.put("GKnumber", 2L);

		columnBitmasks.put("norm", 4L);

		columnBitmasks.put("GKName", 8L);

		columnBitmasks.put("preOrder", 16L);

		columnBitmasks.put("GKComponent", 32L);

		columnBitmasks.put("freight", 64L);

		columnBitmasks.put("price", 128L);

		columnBitmasks.put("team", 256L);

		columnBitmasks.put("remark", 512L);

		columnBitmasks.put("imageName", 1024L);

		columnBitmasks.put("total", 2048L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private GKDetail _escapedModel;

}