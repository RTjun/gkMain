/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ProductDAO.model.impl;

import ProductDAO.model.GKImage;
import ProductDAO.model.GKImageModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the GKImage service. Represents a row in the &quot;GK_GKImage&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>GKImageModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GKImageImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see GKImageImpl
 * @generated
 */
@JSON(strict = true)
public class GKImageModelImpl
	extends BaseModelImpl<GKImage> implements GKImageModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a gk image model instance should use the <code>GKImage</code> interface instead.
	 */
	public static final String TABLE_NAME = "GK_GKImage";

	public static final Object[][] TABLE_COLUMNS = {
		{"GKImageId", Types.BIGINT}, {"GKDetailId", Types.BIGINT},
		{"imageName", Types.VARCHAR}, {"imageData", Types.CLOB},
		{"mimeType", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("GKImageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("GKDetailId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("imageName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("imageData", Types.CLOB);
		TABLE_COLUMNS_MAP.put("mimeType", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table GK_GKImage (GKImageId LONG not null primary key,GKDetailId LONG,imageName VARCHAR(75) null,imageData TEXT null,mimeType VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table GK_GKImage";

	public static final String ORDER_BY_JPQL =
		" ORDER BY gkImage.GKImageId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY GK_GKImage.GKImageId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GKIMAGEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public GKImageModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _GKImageId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setGKImageId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _GKImageId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return GKImage.class;
	}

	@Override
	public String getModelClassName() {
		return GKImage.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<GKImage, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<GKImage, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<GKImage, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((GKImage)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<GKImage, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<GKImage, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(GKImage)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<GKImage, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<GKImage, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<GKImage, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<GKImage, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<GKImage, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<GKImage, Object>>();
		Map<String, BiConsumer<GKImage, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<GKImage, ?>>();

		attributeGetterFunctions.put("GKImageId", GKImage::getGKImageId);
		attributeSetterBiConsumers.put(
			"GKImageId", (BiConsumer<GKImage, Long>)GKImage::setGKImageId);
		attributeGetterFunctions.put("GKDetailId", GKImage::getGKDetailId);
		attributeSetterBiConsumers.put(
			"GKDetailId", (BiConsumer<GKImage, Long>)GKImage::setGKDetailId);
		attributeGetterFunctions.put("imageName", GKImage::getImageName);
		attributeSetterBiConsumers.put(
			"imageName", (BiConsumer<GKImage, String>)GKImage::setImageName);
		attributeGetterFunctions.put("imageData", GKImage::getImageData);
		attributeSetterBiConsumers.put(
			"imageData", (BiConsumer<GKImage, String>)GKImage::setImageData);
		attributeGetterFunctions.put("mimeType", GKImage::getMimeType);
		attributeSetterBiConsumers.put(
			"mimeType", (BiConsumer<GKImage, String>)GKImage::setMimeType);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getGKImageId() {
		return _GKImageId;
	}

	@Override
	public void setGKImageId(long GKImageId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_GKImageId = GKImageId;
	}

	@JSON
	@Override
	public long getGKDetailId() {
		return _GKDetailId;
	}

	@Override
	public void setGKDetailId(long GKDetailId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_GKDetailId = GKDetailId;
	}

	@JSON
	@Override
	public String getImageName() {
		if (_imageName == null) {
			return "";
		}
		else {
			return _imageName;
		}
	}

	@Override
	public void setImageName(String imageName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_imageName = imageName;
	}

	@JSON
	@Override
	public String getImageData() {
		if (_imageData == null) {
			return "";
		}
		else {
			return _imageData;
		}
	}

	@Override
	public void setImageData(String imageData) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_imageData = imageData;
	}

	@JSON
	@Override
	public String getMimeType() {
		if (_mimeType == null) {
			return "";
		}
		else {
			return _mimeType;
		}
	}

	@Override
	public void setMimeType(String mimeType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mimeType = mimeType;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, GKImage.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public GKImage toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, GKImage>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GKImageImpl gkImageImpl = new GKImageImpl();

		gkImageImpl.setGKImageId(getGKImageId());
		gkImageImpl.setGKDetailId(getGKDetailId());
		gkImageImpl.setImageName(getImageName());
		gkImageImpl.setImageData(getImageData());
		gkImageImpl.setMimeType(getMimeType());

		gkImageImpl.resetOriginalValues();

		return gkImageImpl;
	}

	@Override
	public GKImage cloneWithOriginalValues() {
		GKImageImpl gkImageImpl = new GKImageImpl();

		gkImageImpl.setGKImageId(
			this.<Long>getColumnOriginalValue("GKImageId"));
		gkImageImpl.setGKDetailId(
			this.<Long>getColumnOriginalValue("GKDetailId"));
		gkImageImpl.setImageName(
			this.<String>getColumnOriginalValue("imageName"));
		gkImageImpl.setImageData(
			this.<String>getColumnOriginalValue("imageData"));
		gkImageImpl.setMimeType(
			this.<String>getColumnOriginalValue("mimeType"));

		return gkImageImpl;
	}

	@Override
	public int compareTo(GKImage gkImage) {
		long primaryKey = gkImage.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof GKImage)) {
			return false;
		}

		GKImage gkImage = (GKImage)object;

		long primaryKey = gkImage.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<GKImage> toCacheModel() {
		GKImageCacheModel gkImageCacheModel = new GKImageCacheModel();

		gkImageCacheModel.GKImageId = getGKImageId();

		gkImageCacheModel.GKDetailId = getGKDetailId();

		gkImageCacheModel.imageName = getImageName();

		String imageName = gkImageCacheModel.imageName;

		if ((imageName != null) && (imageName.length() == 0)) {
			gkImageCacheModel.imageName = null;
		}

		gkImageCacheModel.imageData = getImageData();

		String imageData = gkImageCacheModel.imageData;

		if ((imageData != null) && (imageData.length() == 0)) {
			gkImageCacheModel.imageData = null;
		}

		gkImageCacheModel.mimeType = getMimeType();

		String mimeType = gkImageCacheModel.mimeType;

		if ((mimeType != null) && (mimeType.length() == 0)) {
			gkImageCacheModel.mimeType = null;
		}

		return gkImageCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<GKImage, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<GKImage, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<GKImage, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((GKImage)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<GKImage, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<GKImage, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<GKImage, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((GKImage)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, GKImage>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					GKImage.class, ModelWrapper.class);

	}

	private long _GKImageId;
	private long _GKDetailId;
	private String _imageName;
	private String _imageData;
	private String _mimeType;

	public <T> T getColumnValue(String columnName) {
		Function<GKImage, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((GKImage)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("GKImageId", _GKImageId);
		_columnOriginalValues.put("GKDetailId", _GKDetailId);
		_columnOriginalValues.put("imageName", _imageName);
		_columnOriginalValues.put("imageData", _imageData);
		_columnOriginalValues.put("mimeType", _mimeType);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("GKImageId", 1L);

		columnBitmasks.put("GKDetailId", 2L);

		columnBitmasks.put("imageName", 4L);

		columnBitmasks.put("imageData", 8L);

		columnBitmasks.put("mimeType", 16L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private GKImage _escapedModel;

}