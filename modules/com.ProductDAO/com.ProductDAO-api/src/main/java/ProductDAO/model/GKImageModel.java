/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ProductDAO.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.model.BaseModel;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model interface for the GKImage service. Represents a row in the &quot;GK_GKImage&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation <code>ProductDAO.model.impl.GKImageModelImpl</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in <code>ProductDAO.model.impl.GKImageImpl</code>.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see GKImage
 * @generated
 */
@ProviderType
public interface GKImageModel extends BaseModel<GKImage> {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a gk image model instance should use the {@link GKImage} interface instead.
	 */

	/**
	 * Returns the primary key of this gk image.
	 *
	 * @return the primary key of this gk image
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this gk image.
	 *
	 * @param primaryKey the primary key of this gk image
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the gk image ID of this gk image.
	 *
	 * @return the gk image ID of this gk image
	 */
	public long getGKImageId();

	/**
	 * Sets the gk image ID of this gk image.
	 *
	 * @param GKImageId the gk image ID of this gk image
	 */
	public void setGKImageId(long GKImageId);

	/**
	 * Returns the gk detail ID of this gk image.
	 *
	 * @return the gk detail ID of this gk image
	 */
	public long getGKDetailId();

	/**
	 * Sets the gk detail ID of this gk image.
	 *
	 * @param GKDetailId the gk detail ID of this gk image
	 */
	public void setGKDetailId(long GKDetailId);

	/**
	 * Returns the image name of this gk image.
	 *
	 * @return the image name of this gk image
	 */
	@AutoEscape
	public String getImageName();

	/**
	 * Sets the image name of this gk image.
	 *
	 * @param imageName the image name of this gk image
	 */
	public void setImageName(String imageName);

	/**
	 * Returns the image data of this gk image.
	 *
	 * @return the image data of this gk image
	 */
	@AutoEscape
	public String getImageData();

	/**
	 * Sets the image data of this gk image.
	 *
	 * @param imageData the image data of this gk image
	 */
	public void setImageData(String imageData);

	/**
	 * Returns the mime type of this gk image.
	 *
	 * @return the mime type of this gk image
	 */
	@AutoEscape
	public String getMimeType();

	/**
	 * Sets the mime type of this gk image.
	 *
	 * @param mimeType the mime type of this gk image
	 */
	public void setMimeType(String mimeType);

	@Override
	public GKImage cloneWithOriginalValues();

}